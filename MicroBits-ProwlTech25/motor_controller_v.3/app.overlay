// PWM relatert kode er skrevet av Erik-Andre Hegna
// CANBUS relatert kode er skrevet av Ola Andrup, og er dekt i stor grad i hans del i rapporten.

// Dette er en enhetstre overlay fil. Den brukes for å definere hardware-konfigurasjonen
// til kernelen under "runtime".

&spi1 {
	status = "okay";
	pinctrl-0 = <&spi1_default>;
	pinctrl-names = "default";
	cs-gpios = <&gpio1 2 GPIO_ACTIVE_LOW>;
	mcp2515_can: mcp2515@0 {
		compatible = "microchip,mcp2515";
        spi-max-frequency = <8000000>;
        int-gpios = <&gpio0 2 GPIO_ACTIVE_LOW>;
        status = "okay";
		label = "CAN_Recieve";
		reg = <0x0>;
		osc-freq = <16000000>;
		bus-speed = <125000>;
		sjw = <1>;
		prop-seg = <2>;
		phase-seg1 = <7>;
		phase-seg2 = <6>;
		#address-cells = <1>;
		#size-cells = <0>;

	};

};

//(RAS) legger til UART1 for VESC motorstyring
&uart1 {
    status = "okay";
    current-speed = <115200>;
    pinctrl-0 = <&uart1_default>;
    pinctrl-names = "default";
};

// pinCtrl seksjonen definerer pin konfigurasjonen for de ulike periferene.
// pwmX_default_alt og pwmX_sleep_alt  er ulik konfigurasjoner eller moduser pinen kan ha.
// Den kan enten sove eller være aktiv. 

// For å vite hvilke GPIO port-nummer og PIN nummer i hver GPIO port som tilhører de ulike pinnene
// på microbiten sitt GPIO-brett er tabellen på denne nettsiden brukt:
// https://tech.microbit.org/hardware/edgeconnector/

&pinctrl {
    spi1_default: spi1_default {
		group1 {
			psels = <NRF_PSEL(SPIM_MOSI, 0, 13)>,
					<NRF_PSEL(SPIM_SCK, 0, 17)>,
					<NRF_PSEL(SPIM_MISO, 0, 1)>;
		};
	};
   
    //(ras)
    uart1_default: uart1_default {
        group1 {
            psels = <NRF_PSEL(UART_TX, 0, 3)>, //TX = P3
                    <NRF_PSEL(UART_RX, 0, 4)>; //RX = P4
        };
    };
 };

 //Velger MCP2515 som can-bus for zephyr (fenris2024)
 / {
    chosen {
        zephyr,canbus = &mcp2515_can;
    };
 };